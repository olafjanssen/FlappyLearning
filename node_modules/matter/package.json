{
  "_args": [
    [
      {
        "raw": "matter",
        "scope": null,
        "escapedName": "matter",
        "name": "matter",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/olafjanssen/Dropbox/Personal/Apps/game-ai"
    ]
  ],
  "_from": "matter@latest",
  "_id": "matter@0.2.0",
  "_inCache": true,
  "_location": "/matter",
  "_npmUser": {
    "name": "justinvdm",
    "email": "justinvdm@lavabit.com"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "matter",
    "scope": null,
    "escapedName": "matter",
    "name": "matter",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/matter/-/matter-0.2.0.tgz",
  "_shasum": "892c6af745389f788661210755807f39dc012ffa",
  "_shrinkwrap": null,
  "_spec": "matter",
  "_where": "/Users/olafjanssen/Dropbox/Personal/Apps/game-ai",
  "author": {
    "name": "justinvdm"
  },
  "bugs": {
    "url": "https://github.com/justinvdm/matter/issues"
  },
  "dependencies": {
    "js-yaml": "~2.1.0",
    "underscore": "~1.5.2"
  },
  "description": "Flexible front matter parser",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-mocha-test": "~0.6.3"
  },
  "directories": {},
  "dist": {
    "shasum": "892c6af745389f788661210755807f39dc012ffa",
    "tarball": "https://registry.npmjs.org/matter/-/matter-0.2.0.tgz"
  },
  "homepage": "https://github.com/justinvdm/matter#readme",
  "keywords": [
    "front matter",
    "metadata"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "justinvdm",
      "email": "justinvdm@lavabit.com"
    }
  ],
  "name": "matter",
  "optionalDependencies": {},
  "readme": "# matter\nFlexible front matter parser.\n\n```javascript\nmatter.yaml('---\\nfoo: bar\\n---');\n// => {foo: 'bar'}\n\nmatter.yaml.inFile('./stuff.md', function(err, metadata) {\n  // ...\n});\n\nmatter.json('---\\n{\"foo\": \"bar\"}\\n---');\n// => {foo: 'bar'}\n\nmatter.json.inFile('./stuff.md', function(err, metadata) {\n  // ...\n});\n```\n\n## What can it do?\n- Parse front matters embedded in comments (or any configurable tokens)\n- Allow custom parsers to be plugged in\n- Keep the parsing as configurable as possible\n\n## API\n\n#### `matter.yaml(string, [options])`\nAlias to `matter.parse.yaml`.\n\n```javascript\nconsole.log(matter.yaml('---\\nfoo: bar\\n---'));\n// => {foo: 'bar'}\n```\n\n#### `matter.yaml.inFile(filepath, [options], callback)`\nAlias to `matter.parse.yaml.inFile`.\n\n```javascript\nmatter.yaml.inFile('./stuff.md', function(err, metadata, data) {\n  if (!err) {\n    console.log(metadata);\n  };\n});\n```\n\n#### `matter.json(string, [options])`\nAlias to `matter.parse.json`.\n\n```javascript\nconsole.log(matter.json('---\\n{\"foo\": \"bar\"}\\n---'));\n// => {foo: 'bar'}\n```\n\n#### `matter.json.inFile(filepath, [options], callback)`\nAlias to `matter.parse.json.inFile`.\n\n```javascript\nmatter.json.inFile('./stuff.md', function(err, metadata, data) {\n  if (!err) {\n    console.log(metadata);\n  };\n});\n```\n\n#### `matter.parse.<parserName>(string, [options])`\n- `string`: A string containing the front matter to be parsed\n- `options`: An object of options\n  - `ignore`: A regex or string representing tokens to be ignored when extracting the front matter. Used to extract the front matter. The tokens ignored by default are `//`, `/*`, `*/`, `#`.\n  - `indicator` (default=`/---/`): A regex or string to use as the front matter head and tail indicators\n  - `indicators`: An object of options to use for the front matter head and tail indicators:\n      - `head`: A regex or string to use as the front matter's head indicator. Defaults to `indicator`'s value.\n      - `tail`: A regex or string to use as the front matter's tail indicator. Defaults to `indicators`'s value\n\nParses a string containing a front matter using the parser registered as `parserName`.\n\n```javascript\nconsole.log(matter.parse.yaml('---\\nfoo: bar\\n---'));\n// => {foo: 'bar'}\n```\n\n#### `matter.parse.<parserName>.inFile(filepath, [options], callback)`\n- `filename`: A relative or absolute path to the file with the front matter to be parsed\n- `options`: An object of options:\n  - `encoding` (default=`'utf8'`): The `encoding` to be used when reading the file\n  - `ignore`: A regex or string representing tokens to be ignored when extracting the front matter. Used to extract the front matter. The tokens ignored by default are `//`, `/*`, `*/`, `#`.\n  - `indicator` (default=`/---/`): A regex or string to use as the front matter head and tail indicators\n  - `indicators`: An object of options to use for the front matter head and tail indicators:\n      - `head`: A regex or string to use as the front matter's head indicator. Defaults to `indicator`'s value.\n      - `tail`: A regex or string to use as the front matter's tail indicator. Defaults to `indicators`'s value\n  - *[[`fs.readFile`](http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback) options]*\n- `callback(err, metadata, data)`: A function to be called when the file has been read and the front matter has been parsed.\n  - `err`: An error object for an error which may have occured while reading and parsing the file. `null` if no error occured.\n  - `metadata`: An object containing the extracted and parsed front matter data\n  - `data`: A string of the actual data contained in the file\n\nParses a file containing a front matter using the parser registered as `parserName`.\n\n```javascript\nmatter.parse.yaml.inFile('./stuff.md', function(err, metadata, data) {\n  if (!err) {\n    console.log(metadata);\n  };\n});\n```\n\n#### `matter.parsers.register(name, fn)`\n- `name`: The name of the parser. Once registered, the parser becomes a\nproperty of `matter.parse`.\n- `fn(data)`: The function to convert the extracted front matter string into\na JSON object.\n  - `data`: A string containing the extracted front matter data. `matter`\n  tries clean the data up as best it can without breaking the format.\n\nRegisters a new front matter parser.\n\n```javascript\nmatter.parsers.register('odd', function(data) {\n  var obj = {};\n\n  data\n    .split(',')\n    .map(function(kv) {\n      kv = kv.split('=');\n      obj[kv[0]] = kv[1];\n    });\n\n  return obj;\n});\n\nconsole.log(matter.parse.odd('---\\nfoo=bar,baz=qux\\n---\\n'));\n// => {foo: 'bar', baz: 'qux'});\n```\n\n#### `matter.parsers.unregister(name)`\n- `name`: The name of the parser to unregister.\n\nUnregisters a parser.\n\n```javascript\nmatter.parsers.unregister('odd');\n```\n\n#### `matter.parsers.defaults(overrides)`\n- `overrides`: An object containing the new defaults. `matter` uses the\nfollowing defaults:\n  - `encoding` (default=`'utf8'`): The `encoding` to be used when reading files\n  - `ignore`: A regex or string representing tokens to be ignored when extracting the front matter. Used to extract the front matter. The tokens ignored by default are `//`, `/*`, `*/`, `#`.\n  - `indicator` (default=`/---/`): A regex or string to use as the front matter head and tail indicators\n  - `indicators`: An object of options to use for the front matter head and tail indicators:\n      - `head`: A regex or string to use as the front matter's head indicator. Defaults to `indicator`'s value.\n      - `tail`: A regex or string to use as the front matter's tail indicator. Defaults to `indicators`'s value\n\nSets new defaults for parsing. \n\n```javascript\nmatter.parsers.defaults({ignore: /!/g});\n```\n\n#### `matter.parsers.defaults()`\nReturns a shallow copy of the parsing defaults.\n\n```javascript\nconsole.log(matter.parsers.defaults());\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/justinvdm/matter.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.2.0"
}
